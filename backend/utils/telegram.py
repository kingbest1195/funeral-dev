"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API.
–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.
"""
import requests
import os
import re
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_API_KEY = os.getenv("TELEGRAM_BOT_API_KEY")
TELEGRAM_SUPERGROUP_ID = os.getenv("TELEGRAM_SUPERGROUP_ID")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_API_KEY}"


def format_phone_for_telegram(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Telegram - –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ + –∏ —Ü–∏—Ñ—Ä—ã.

    Args:
        phone: –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è Telegram
    """
    if not phone:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^+\d]', '', phone)

    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if clean_phone.startswith('8'):
        clean_phone = '+7' + clean_phone[1:]
    elif clean_phone.startswith('7') and not clean_phone.startswith('+'):
        clean_phone = '+' + clean_phone
    elif not clean_phone.startswith('+') and len(clean_phone) >= 10:
        clean_phone = '+7' + clean_phone

    return clean_phone


def format_moscow_datetime(iso_timestamp: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç ISO timestamp –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.

    Args:
        iso_timestamp: ISO —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-09-19T18:27:13.049Z")

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "19 –°–µ–Ω—Ç—è–±—Ä—è 2025 21:30")
    """
    try:
        # –ü–∞—Ä—Å–∏–º ISO timestamp
        dt = datetime.fromisoformat(iso_timestamp.replace('Z', '+00:00'))

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
        moscow_tz = timezone(timedelta(hours=3))
        moscow_dt = dt.astimezone(moscow_tz)

        # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        months = {
            1: '–Ø–Ω–≤–∞—Ä—è', 2: '–§–µ–≤—Ä–∞–ª—è', 3: '–ú–∞—Ä—Ç–∞', 4: '–ê–ø—Ä–µ–ª—è',
            5: '–ú–∞—è', 6: '–ò—é–Ω—è', 7: '–ò—é–ª—è', 8: '–ê–≤–≥—É—Å—Ç–∞',
            9: '–°–µ–Ω—Ç—è–±—Ä—è', 10: '–û–∫—Ç—è–±—Ä—è', 11: '–ù–æ—è–±—Ä—è', 12: '–î–µ–∫–∞–±—Ä—è'
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
        day = moscow_dt.day
        month = months[moscow_dt.month]
        year = moscow_dt.year
        hour = moscow_dt.hour
        minute = moscow_dt.minute

        return f"{day} {month} {year} {hour:02d}:{minute:02d}"

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return iso_timestamp


def format_quiz_message(quiz_data: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–≤–∏–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram.

    Args:
        quiz_data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–≤–∏–∑–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    option_labels = {
        # –¢–∏–ø –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è
        "funeral": "–ü–æ—Ö–æ—Ä–æ–Ω—ã",
        "cremation": "–ö—Ä–µ–º–∞—Ü–∏—è",

        # –ì—Ä–æ–±/—É—Ä–Ω–∞
        "economy": "–≠–∫–æ–Ω–æ–º",
        "standard": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "premium": "–ü—Ä–µ–º–∏—É–º",

        # –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
        "wreath": "–í–µ–Ω–æ–∫",
        "cross": "–ö—Ä–µ—Å—Ç –Ω–∞ –º–æ–≥–∏–ª—É",
        "ribbons": "–¢—Ä–∞—É—Ä–Ω—ã–µ –ª–µ–Ω—Ç—ã",
        "clothes": "–û–¥–µ–∂–¥–∞ –¥–ª—è —É—Å–æ–ø—à–µ–≥–æ",

        # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        "yes": "–î–∞",
        "no": "–ù–µ—Ç"
    }

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</b>\n\n"

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += f"üë§ <b>–ò–º—è:</b> {quiz_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞ –≤ Telegram
    phone = quiz_data.get('phone', '')
    formatted_phone = format_phone_for_telegram(phone)
    message += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {formatted_phone}\n\n"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏
    message += "üìã <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—è–≤–∫–∏:</b>\n"

    # –¢–∏–ø –∑–∞—Ö–æ—Ä–æ–Ω–µ–Ω–∏—è
    burial_type = quiz_data.get('step_1')
    if burial_type:
        message += f"‚Ä¢ –¢–∏–ø: {option_labels.get(burial_type, burial_type)}\n"

    # –ì—Ä–æ–±/—É—Ä–Ω–∞
    coffin_type = quiz_data.get('step_2')
    if coffin_type:
        coffin_label = option_labels.get(coffin_type, coffin_type)
        if burial_type == "cremation":
            message += f"‚Ä¢ –£—Ä–Ω–∞: {coffin_label}\n"
        else:
            message += f"‚Ä¢ –ì—Ä–æ–±: {coffin_label}\n"

    # –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
    accessories = quiz_data.get('step_3', [])
    if accessories and isinstance(accessories, list) and len(accessories) > 0:
        accessories_labels = [option_labels.get(acc, acc) for acc in accessories]
        message += f"‚Ä¢ –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏: {', '.join(accessories_labels)}\n"

    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    transport = quiz_data.get('step_4')
    if transport:
        transport_label = "–ê–≤—Ç–æ–±—É—Å –¥–ª—è –≥–æ—Å—Ç–µ–π" if transport == "yes" else "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω—É–∂–µ–Ω"
        message += f"‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {transport_label}\n"

    # –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
    timestamp = quiz_data.get('timestamp')
    if timestamp:
        formatted_time = format_moscow_datetime(timestamp)
        message += f"\nüïê <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> {formatted_time}\n"

    message += "\nüí° <i>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç</i>"

    return message


async def send_telegram_message(message: str, chat_id: Optional[str] = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç.

    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id: ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TELEGRAM_SUPERGROUP_ID)

    Returns:
        True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not TELEGRAM_BOT_API_KEY or not TELEGRAM_SUPERGROUP_ID:
        raise ValueError("Telegram API –∫–ª—é—á –∏–ª–∏ ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    target_chat_id = chat_id or TELEGRAM_SUPERGROUP_ID

    url = f"{TELEGRAM_API_URL}/sendMessage"

    payload = {
        "chat_id": target_chat_id,
        "text": message,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }

    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()

        result = response.json()

        if result.get("ok"):
            return True
        else:
            print(f"Telegram API –æ—à–∏–±–∫–∞: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
        return False
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


async def send_quiz_notification(quiz_data: Dict[str, Any]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –∏–∑ –∫–≤–∏–∑–∞ –≤ Telegram.

    Args:
        quiz_data: –î–∞–Ω–Ω—ã–µ –∏–∑ –∫–≤–∏–∑–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞

    Returns:
        True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        message = format_quiz_message(quiz_data)
        return await send_telegram_message(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ: {str(e)}")
        return False


def test_telegram_connection() -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –±–æ—Ç—É.

    Returns:
        True –µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not TELEGRAM_BOT_API_KEY:
        return False

    url = f"{TELEGRAM_API_URL}/getMe"

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()

        result = response.json()
        return result.get("ok", False)

    except Exception:
        return False