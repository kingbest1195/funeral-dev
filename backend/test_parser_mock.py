"""
–ú–æ–∫-–≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.
–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""
import os
import json
from datetime import datetime, timedelta
import random
from dotenv import load_dotenv

def generate_mock_reviews():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ URL –∏–∑ .env
    load_dotenv()
    yandex_urls = os.getenv("YANDEX_URLS", "").split(',')

    # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
    yandex_urls = [url.strip() for url in yandex_urls if url.strip()]

    if not yandex_urls:
        yandex_urls = [
            "https://yandex.ru/maps/org/vek_funeral_hall/example1",
            "https://yandex.ru/maps/org/vek/example2"
        ]

    # –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ—Ö–æ—Ä–æ–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    mock_reviews_data = [
        {
            'author': '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞',
            'text': '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Ö–æ—Ä–æ–Ω –º–æ–µ–π –º–∞–º—ã. –í—Å–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ —Å –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ–º –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º. –û—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ —Ç–∞–∫–æ–π —Å–ª–æ–∂–Ω—ã–π –¥–ª—è –Ω–∞—Å –ø–µ—Ä–∏–æ–¥.',
            'days_ago': 5,
            'rating': 5.0
        },
        {
            'author': '–°–µ—Ä–≥–µ–π –ú.',
            'text': '–û—Ç–ª–∏—á–Ω–∞—è —Å–ª—É–∂–±–∞. –ü–æ–º–æ–≥–ª–∏ –≤–æ –≤—Å–µ–º, –≤–∑—è–ª–∏ –Ω–∞ —Å–µ–±—è –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –¶–µ–Ω—ã —Ä–∞–∑—É–º–Ω—ã–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–µ.',
            'days_ago': 12,
            'rating': 5.0
        },
        {
            'author': '–ú–∞—Ä–∏–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–Ω–∞',
            'text': '–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏. –í —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            'days_ago': 8,
            'rating': 5.0
        },
        {
            'author': '–î–º–∏—Ç—Ä–∏–π',
            'text': '–ë—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–µ–¥–æ—Ä–æ–≥–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º, –∫—Ç–æ —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ö–æ—Ä–æ–Ω. –ü–µ—Ä—Å–æ–Ω–∞–ª –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Ç–∞–∫—Ç–∏—á–Ω—ã–π.',
            'days_ago': 3,
            'rating': 5.0
        },
        {
            'author': '–ï–ª–µ–Ω–∞ –ö.',
            'text': '–û—á–µ–Ω—å –¥–æ–≤–æ–ª—å–Ω—ã —Ä–∞–±–æ—Ç–æ–π. –í—Å–µ —Å–¥–µ–ª–∞–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.',
            'days_ago': 15,
            'rating': 4.0
        },
        {
            'author': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
            'text': '–û–±—Ä–∞—â–∞–ª–∏—Å—å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ö–æ—Ä–æ–Ω –æ—Ç—Ü–∞. –í—Å–µ –ø—Ä–æ—à–ª–æ –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ. –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å –≤ —Ç–∞–∫–æ–π —Ç—è–∂–µ–ª—ã–π –ø–µ—Ä–∏–æ–¥. –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.',
            'days_ago': 22,
            'rating': 5.0
        },
        {
            'author': '–ò—Ä–∏–Ω–∞',
            'text': '–•–æ—Ä–æ—à–∞—è —Å–ª—É–∂–±–∞, —Ä–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã. –ü–æ–º–æ–≥–ª–∏ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä–æ–±–∞ –∏ –≤–µ–Ω–∫–æ–≤.',
            'days_ago': 7,
            'rating': 4.0
        },
        {
            'author': '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –°—Ç–µ–ø–∞–Ω–æ–≤–Ω–∞',
            'text': '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–æ—Å—Ç–æ–π–Ω—ã—Ö –ø–æ—Ö–æ—Ä–æ–Ω —Å—É–ø—Ä—É–≥–∞. –í—Å–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –æ—á–µ–Ω—å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –í —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.',
            'days_ago': 30,
            'rating': 5.0
        },
        {
            'author': '–ù–∏–∫–æ–ª–∞–π –ü.',
            'text': '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É—é.',
            'days_ago': 18,
            'rating': 5.0
        },
        {
            'author': '–õ—é–¥–º–∏–ª–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞',
            'text': '–û—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –∑–∞ –ø–æ–º–æ—â—å. –í —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É –ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –í—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–æ –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ, —Ü–µ–Ω—ã —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–µ.',
            'days_ago': 45,
            'rating': 4.0
        },
        {
            'author': '–ê–Ω–¥—Ä–µ–π –°.',
            'text': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ.',
            'days_ago': 6,
            'rating': 5.0
        },
        {
            'author': '–ì–∞–ª–∏–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞',
            'text': '–û–±—Ä–∞—â–∞–ª–∏—Å—å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Ö–æ—Ä–æ–Ω –º–∞–º—ã. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø—Ä–æ—è–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–µ–ª–∏–∫–∞—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º. –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞–ª–∏—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ. –ë–æ–ª—å—à–æ–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ —Å–ø–∞—Å–∏–±–æ.',
            'days_ago': 14,
            'rating': 5.0
        }
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑)
    avatar_urls = [
        'https://avatars.yandex.net/get-yapic/123/456-789',
        'https://avatars.yandex.net/get-yapic/456/789-123',
        'https://avatars.yandex.net/get-yapic/789/123-456',
        None, None, None  # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–æ–≤
    ]

    reviews = []
    now = datetime.now()

    for i, review_data in enumerate(mock_reviews_data, 1):
        publish_date = now - timedelta(days=review_data['days_ago'])
        branch_num = random.choice([1, 2])  # 2 —Ñ–∏–ª–∏–∞–ª–∞
        source_url = yandex_urls[branch_num - 1] if branch_num <= len(yandex_urls) else yandex_urls[0]

        review = {
            'branch': branch_num,
            'review_number': i,
            'source': 'yandex',
            'source_name': '–Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å',
            'source_url': source_url,
            'author_name': review_data['author'],
            'review_text': review_data['text'],
            'rating': review_data['rating'],
            'date_original': f"{review_data['days_ago']} –¥–Ω—è –Ω–∞–∑–∞–¥" if review_data['days_ago'] < 7 else f"{review_data['days_ago']//7} –Ω–µ–¥–µ–ª –Ω–∞–∑–∞–¥",
            'publish_date': publish_date.strftime('%Y-%m-%d %H:%M:%S'),
            'author_avatar_url': random.choice(avatar_urls),
            'text_length': len(review_data['text'])
        }
        reviews.append(review)

    return reviews

def test_mock_parser():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏."""
    load_dotenv()

    print("üé≠ –ó–∞–ø—É—Å–∫ MOCK-–ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    print("(–ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)")

    all_reviews = generate_mock_reviews()

    print(f"\nüéâ Mock-—Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(all_reviews)} –æ—Ç–∑—ã–≤–æ–≤")

    return all_reviews

if __name__ == '__main__':
    reviews = test_mock_parser()

    if reviews:
        print("\n" + "="*80)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ MOCK-–ü–ê–†–°–ò–ù–ì–ê:")
        print("="*80)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞ (—É–±—ã–≤–∞–Ω–∏–µ) ‚Üí –¥–∞—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ)
        reviews_sorted = sorted(reviews, key=lambda x: (-x['text_length'], x['publish_date']), reverse=False)

        for i, review in enumerate(reviews_sorted, 1):
            stars = "‚≠ê" * int(review['rating']) + "‚òÜ" * (5 - int(review['rating']))
            print(f"\n--- –û—Ç–∑—ã–≤ #{i} (—Ñ–∏–ª–∏–∞–ª {review['branch']}) ---")
            print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {review['source_name']}")
            print(f"URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {review['source_url']}")
            print(f"–ê–≤—Ç–æ—Ä: {review['author_name']}")
            print(f"–†–µ–π—Ç–∏–Ω–≥: {review['rating']} {stars}")
            print(f"–î–∞—Ç–∞: {review['date_original']} ({review['publish_date']})")
            print(f"–¢–µ–∫—Å—Ç ({review['text_length']} —Å–∏–º–≤–æ–ª–æ–≤): {review['review_text']}")
            if review['author_avatar_url']:
                print(f"–ê–≤–∞—Ç–∞—Ä: {review['author_avatar_url']}")
            print("-" * 50)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        with open('mock_reviews.json', 'w', encoding='utf-8') as f:
            json.dump(reviews, f, ensure_ascii=False, indent=2, default=str)

        print(f"\nüíæ –í—Å–µ –æ—Ç–∑—ã–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: mock_reviews.json")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_chars = sum(r['text_length'] for r in reviews)
        avg_length = total_chars / len(reviews) if reviews else 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        ratings = [r['rating'] for r in reviews]
        avg_rating = sum(ratings) / len(ratings) if ratings else 0
        rating_counts = {}
        for rating in ratings:
            rating_counts[rating] = rating_counts.get(rating, 0) + 1

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
        print(f"–§–∏–ª–∏–∞–ª 1: {len([r for r in reviews if r['branch'] == 1])} –æ—Ç–∑—ã–≤–æ–≤")
        print(f"–§–∏–ª–∏–∞–ª 2: {len([r for r in reviews if r['branch'] == 2])} –æ—Ç–∑—ã–≤–æ–≤")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤: {max(r['text_length'] for r in reviews)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤: {min(r['text_length'] for r in reviews)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–° –∞–≤–∞—Ç–∞—Ä–∞–º–∏: {len([r for r in reviews if r['author_avatar_url']])} –æ—Ç–∑—ã–≤–æ–≤")
        print(f"\n‚≠ê –†–ï–ô–¢–ò–ù–ì–ò:")
        print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f} –∏–∑ 5")
        for rating in sorted(rating_counts.keys(), reverse=True):
            stars = "‚≠ê" * int(rating)
            print(f"  {rating} {stars}: {rating_counts[rating]} –æ—Ç–∑—ã–≤–æ–≤")

        print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º!")
        print(f"üìç –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç API endpoint: GET /api/reviews")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ mock-–¥–∞–Ω–Ω—ã—Ö")