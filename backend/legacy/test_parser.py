"""
–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
–¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤.
"""
import os
import time
from datetime import datetime, timedelta
import re
import json

from bs4 import BeautifulSoup
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from webdriver_manager.chrome import ChromeDriverManager

def parse_yandex_date(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: "–≤—á–µ—Ä–∞", "2 –¥–Ω—è –Ω–∞–∑–∞–¥", "–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥", "–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥", "–î–î –º–µ—Å—è—Ü–∞ –ì–ì–ì–ì"
    """
    date_str = date_str.lower().strip()
    now = datetime.now()

    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    if "–≤—á–µ—Ä–∞" in date_str:
        return now - timedelta(days=1)
    elif "–¥–Ω—è –Ω–∞–∑–∞–¥" in date_str or "–¥–µ–Ω—å –Ω–∞–∑–∞–¥" in date_str:
        days_match = re.search(r'(\d+)', date_str)
        if days_match:
            days = int(days_match.group(1))
            return now - timedelta(days=days)
        return now - timedelta(days=1)
    elif "–Ω–µ–¥–µ–ª" in date_str:
        weeks_match = re.search(r'(\d+)', date_str)
        if weeks_match:
            weeks = int(weeks_match.group(1))
            return now - timedelta(weeks=weeks)
        return now - timedelta(weeks=1)
    elif "–º–µ—Å—è—Ü" in date_str:
        months_match = re.search(r'(\d+)', date_str)
        if months_match:
            months = int(months_match.group(1))
            return now - timedelta(days=months * 30)
        return now - timedelta(days=30)
    elif "–≥–æ–¥" in date_str:
        years_match = re.search(r'(\d+)', date_str)
        if years_match:
            years = int(years_match.group(1))
            return now - timedelta(days=years * 365)
        return now - timedelta(days=365)

    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—É—é –¥–∞—Ç—É
    # –§–æ—Ä–º–∞—Ç: "15 –¥–µ–∫–∞–±—Ä—è 2023"
    months_map = {
        '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6,
        '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
    }

    for month_name, month_num in months_map.items():
        if month_name in date_str:
            try:
                parts = date_str.split()
                day = int(parts[0])
                year = int(parts[2]) if len(parts) > 2 else now.year
                return datetime(year, month_num, day)
            except (ValueError, IndexError):
                continue

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    return now

def test_yandex_parser():
    """
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤.
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    yandex_urls = os.getenv("YANDEX_URLS")

    if not yandex_urls:
        print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è YANDEX_URLS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")
        return []

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChromeDriver
        chrome_driver_path = None

        try:
            # –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ webdriver-manager
            chrome_driver_path = ChromeDriverManager().install()
        except Exception as e1:
            print(f"Webdriver-manager –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e1}")

            try:
                # –°–ø–æ—Å–æ–± 2: –°–∏—Å—Ç–µ–º–Ω—ã–π chromedriver
                driver = webdriver.Chrome(options=options)
                driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π ChromeDriver")
            except Exception as e2:
                print(f"–°–∏—Å—Ç–µ–º–Ω—ã–π ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω: {e2}")
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mock-–≤–µ—Ä—Å–∏—é: python3 test_parser_mock.py")
                return []
        else:
            driver = webdriver.Chrome(
                service=ChromeService(chrome_driver_path),
                options=options
            )
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ChromeDriver: {chrome_driver_path}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å mock-–≤–µ—Ä—Å–∏—é: python3 test_parser_mock.py")
        return []

    print("–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç...")

    all_reviews = []

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞
    for i, url in enumerate(yandex_urls.split(','), 1):
        url = url.strip()
        if not url:
            continue

        print(f"\n--- –§–∏–ª–∏–∞–ª {i} ---")
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é URL: {url}")

        try:
            driver.get(url)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            wait = WebDriverWait(driver, 15)

            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
                wait.until(EC.any_of(
                    EC.presence_of_element_located((By.CSS_SELECTOR, 'div[data-testid="business-review-view"]')),
                    EC.element_to_be_clickable((By.CSS_SELECTOR, '[data-testid="reviews-tab"]')),
                    EC.element_to_be_clickable((By.CSS_SELECTOR, '[aria-label*="–æ—Ç–∑—ã–≤"]'))
                ))
            except TimeoutException:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {url}")
                continue

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤
            try:
                reviews_tab = driver.find_element(By.CSS_SELECTOR, '[data-testid="reviews-tab"]')
                if reviews_tab:
                    driver.execute_script("arguments[0].click();", reviews_tab)
                    time.sleep(3)
                    print("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤")
            except NoSuchElementException:
                print("‚ÑπÔ∏è –í–∫–ª–∞–¥–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞")

            time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ –æ—Ç–∑—ã–≤—ã...")

            # –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç–∑—ã–≤–æ–≤
            scrollable_selectors = [
                'div[class*="business-reviews-card-view__reviews-list"]',
                'div[class*="scroll-container"]',
                'div[data-testid="reviews-list"]',
                '.business-reviews-card-view'
            ]

            scrollable_element = None
            for selector in scrollable_selectors:
                try:
                    scrollable_element = driver.find_element(By.CSS_SELECTOR, selector)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {selector}")
                    break
                except NoSuchElementException:
                    continue

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if not scrollable_element:
                scrollable_element = driver.find_element(By.TAG_NAME, "body")
                print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
            last_height = driver.execute_script("return arguments[0].scrollHeight", scrollable_element)
            scroll_attempts = 0
            max_scroll_attempts = 15

            while scroll_attempts < max_scroll_attempts:
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º
                driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", scrollable_element)
                time.sleep(2)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞
                new_height = driver.execute_script("return arguments[0].scrollHeight", scrollable_element)
                if new_height == last_height:
                    scroll_attempts += 1
                else:
                    scroll_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∏–ª—Å—è

                last_height = new_height

            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")

            # –ü–æ–ª—É—á–∞–µ–º HTML –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            page_source = driver.page_source
            soup = BeautifulSoup(page_source, 'html.parser')

            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            review_selectors = [
                'div[data-testid="business-review-view"]',
                'div[class*="business-review-view"]',
                '.business-review-view',
                'div[class*="review"]'
            ]

            review_cards = []
            for selector in review_selectors:
                review_cards = soup.select(selector)
                if review_cards:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—Ç–∑—ã–≤—ã —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                    break

            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(review_cards)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {i}")

            if not review_cards:
                print("‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                continue

            branch_reviews = []

            for j, card in enumerate(review_cards, 1):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
                    author_selectors = [
                        'span[itemprop="name"]',
                        '.user-name',
                        '[class*="user-name"]',
                        '[data-testid="review-author"]'
                    ]

                    author_name = None
                    for selector in author_selectors:
                        author_element = card.select_one(selector)
                        if author_element:
                            author_name = author_element.get_text(strip=True)
                            break

                    if not author_name:
                        continue

                    # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
                    text_selectors = [
                        'span.business-review-view__body-text',
                        '[class*="review-text"]',
                        '[class*="body-text"]',
                        '[data-testid="review-text"]'
                    ]

                    review_text = None
                    for selector in text_selectors:
                        text_element = card.select_one(selector)
                        if text_element:
                            review_text = text_element.get_text(strip=True)
                            break

                    if not review_text:
                        continue

                    # –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞
                    date_selectors = [
                        'span.business-review-view__date',
                        '[class*="review-date"]',
                        '[class*="date"]',
                        '[data-testid="review-date"]'
                    ]

                    publish_date = datetime.now()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    date_str = "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                    for selector in date_selectors:
                        date_element = card.select_one(selector)
                        if date_element:
                            date_str = date_element.get_text(strip=True)
                            publish_date = parse_yandex_date(date_str)
                            break

                    # –ê–≤–∞—Ç–∞—Ä (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
                    avatar_selectors = [
                        'img.user-avatar-view__image',
                        '[class*="avatar"] img',
                        '[class*="user-image"] img'
                    ]

                    author_avatar_url = None
                    for selector in avatar_selectors:
                        avatar_img = card.select_one(selector)
                        if avatar_img and avatar_img.has_attr('src'):
                            author_avatar_url = avatar_img['src']
                            break

                    # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞
                    rating = 5.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    try:
                        # –ò—â–µ–º meta —Ç–µ–≥ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                        rating_meta = card.select_one('meta[itemprop="ratingValue"]')
                        if rating_meta and rating_meta.has_attr('content'):
                            rating_value = rating_meta['content']
                            rating = float(rating_value)
                        else:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–¥—Å—á–µ—Ç –∑–≤–µ–∑–¥
                            full_stars = card.select('.business-rating-badge-view__star._full')
                            if full_stars:
                                rating = float(len(full_stars))
                    except (ValueError, TypeError):
                        rating = 5.0  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º 5

                    review_data = {
                        'branch': i,
                        'review_number': j,
                        'source': 'yandex',
                        'source_name': '–Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å',
                        'source_url': url,
                        'author_name': author_name,
                        'review_text': review_text,
                        'rating': rating,
                        'date_original': date_str,
                        'publish_date': publish_date.strftime('%Y-%m-%d %H:%M:%S'),
                        'author_avatar_url': author_avatar_url,
                        'text_length': len(review_text)
                    }

                    branch_reviews.append(review_data)
                    all_reviews.append(review_data)

                    print(f"  ‚úÖ –û—Ç–∑—ã–≤ {j}: {author_name} - {len(review_text)} —Å–∏–º–≤–æ–ª–æ–≤")

                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–∞ {j}: {e}")
                    continue

            print(f"üìà –°–æ–±—Ä–∞–Ω–æ {len(branch_reviews)} –æ—Ç–∑—ã–≤–æ–≤ —Å —Ñ–∏–ª–∏–∞–ª–∞ {i}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª–∏–∞–ª–∞ {i} ({url}): {e}")
            continue

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    driver.quit()

    print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_reviews)} –æ—Ç–∑—ã–≤–æ–≤")

    return all_reviews

if __name__ == '__main__':
    reviews = test_yandex_parser()

    if reviews:
        print("\n" + "="*80)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
        print("="*80)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞ (—É–±—ã–≤–∞–Ω–∏–µ) ‚Üí –¥–∞—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ)
        reviews_sorted = sorted(reviews, key=lambda x: (-x['text_length'], x['publish_date']), reverse=False)

        for i, review in enumerate(reviews_sorted[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            print(f"\n--- –û—Ç–∑—ã–≤ #{i} (—Ñ–∏–ª–∏–∞–ª {review['branch']}) ---")
            print(f"–ê–≤—Ç–æ—Ä: {review['author_name']}")
            print(f"–î–∞—Ç–∞: {review['date_original']} ({review['publish_date']})")
            print(f"–¢–µ–∫—Å—Ç ({review['text_length']} —Å–∏–º–≤–æ–ª–æ–≤): {review['review_text'][:200]}{'...' if len(review['review_text']) > 200 else ''}")
            if review['author_avatar_url']:
                print(f"–ê–≤–∞—Ç–∞—Ä: {review['author_avatar_url']}")
            print("-" * 50)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        with open('test_reviews.json', 'w', encoding='utf-8') as f:
            json.dump(reviews, f, ensure_ascii=False, indent=2, default=str)

        print(f"\nüíæ –í—Å–µ –æ—Ç–∑—ã–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: test_reviews.json")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_chars = sum(r['text_length'] for r in reviews)
        avg_length = total_chars / len(reviews) if reviews else 0

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞: {avg_length:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤: {max(r['text_length'] for r in reviews)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤: {min(r['text_length'] for r in reviews)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("\n‚ùå –û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")