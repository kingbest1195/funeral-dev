"""
–û—Ç–ª–∞–¥–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç.
–í—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
"""
import os
import time
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

def debug_yandex_selectors():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç."""

    load_dotenv()
    yandex_urls = os.getenv("YANDEX_URLS")

    if not yandex_urls:
        print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è YANDEX_URLS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver
    options = webdriver.ChromeOptions()
    # –£–±–∏—Ä–∞–µ–º headless –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")

    try:
        driver = webdriver.Chrome(options=options)
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {e}")
        return

    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π URL
    url = yandex_urls.split(',')[0].strip()
    print(f"üîç –û—Ç–ª–∞–∂–∏–≤–∞–µ–º URL: {url}")

    try:
        driver.get(url)
        time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è

        # –ò—â–µ–º –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤ –∏ –∫–ª–∏–∫–∞–µ–º
        try:
            reviews_tab = driver.find_element(By.CSS_SELECTOR, '[data-testid="reviews-tab"]')
            if reviews_tab:
                driver.execute_script("arguments[0].click();", reviews_tab)
                time.sleep(3)
                print("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç–∑—ã–≤–æ–≤")
        except NoSuchElementException:
            print("‚ÑπÔ∏è –í–∫–ª–∞–¥–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ù–µ–º–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º
        driver.execute_script("window.scrollTo(0, 1000);")
        time.sleep(3)

        # –ü–æ–ª—É—á–∞–µ–º HTML
        page_source = driver.page_source
        soup = BeautifulSoup(page_source, 'html.parser')

        # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
        review_selectors = [
            'div[data-testid="business-review-view"]',
            'div[class*="business-review-view"]',
            '.business-review-view',
            'div[class*="review"]'
        ]

        review_cards = []
        used_selector = ""
        for selector in review_selectors:
            review_cards = soup.select(selector)
            if review_cards:
                used_selector = selector
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                break

        if not review_cards:
            print("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            driver.quit()
            return

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(review_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç–∑—ã–≤–æ–≤")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ä—Ç–æ—á–∫–∏
        for i, card in enumerate(review_cards[:3], 1):
            print(f"\n--- –ö–ê–†–¢–û–ß–ö–ê #{i} ---")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤
            author_selectors = [
                'span[itemprop="name"]',
                '.user-name',
                '[class*="user-name"]',
                '[data-testid="review-author"]'
            ]

            author_found = False
            for selector in author_selectors:
                author_element = card.select_one(selector)
                if author_element:
                    print(f"üë§ –ê–≤—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ '{selector}': {author_element.get_text(strip=True)}")
                    author_found = True
                    break

            if not author_found:
                print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç—ã –æ—Ç–∑—ã–≤–æ–≤
            text_selectors = [
                'span.business-review-view__body-text',
                '[class*="review-text"]',
                '[class*="body-text"]',
                '[data-testid="review-text"]',
                'div[class*="review-body"]',
                'div[itemprop="reviewBody"]',
                '.business-review-view__body'
            ]

            text_found = False
            for selector in text_selectors:
                text_element = card.select_one(selector)
                if text_element:
                    text = text_element.get_text(strip=True)
                    print(f"üí¨ –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ '{selector}': {text[:100]}...")
                    text_found = True
                    break

            if not text_found:
                print("‚ö†Ô∏è –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                all_texts = card.find_all(text=True)
                clean_texts = [t.strip() for t in all_texts if t.strip() and len(t.strip()) > 10]
                if clean_texts:
                    print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ:")
                    for j, txt in enumerate(clean_texts[:3], 1):
                        print(f"  {j}. {txt[:80]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
            rating_found = False
            rating_meta = card.select_one('meta[itemprop="ratingValue"]')
            if rating_meta and rating_meta.has_attr('content'):
                print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –Ω–∞–π–¥–µ–Ω: {rating_meta['content']}")
                rating_found = True

            if not rating_found:
                full_stars = card.select('.business-rating-badge-view__star._full')
                if full_stars:
                    print(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∑–≤—ë–∑–¥–∞–º: {len(full_stars)}")
                else:
                    print("‚ö†Ô∏è –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if review_cards:
            with open('debug_card.html', 'w', encoding='utf-8') as f:
                f.write(str(review_cards[0].prettify()))
            print(f"\nüíæ HTML –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ debug_card.html")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        driver.quit()

if __name__ == '__main__':
    debug_yandex_selectors()