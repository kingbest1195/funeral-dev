"""
–ü–∞—Ä—Å–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""
import os
import time
from datetime import datetime
from dotenv import load_dotenv
from bs4 import BeautifulSoup
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from sqlalchemy.orm import sessionmaker

from database import Review, init_db, create_engine_instance
from config.constants import YANDEX_SELECTORS, PARSING_CONFIG
from utils.date_parser import parse_yandex_date
from utils.selenium_utils import setup_chrome_driver, extract_background_image_url


class YandexReviewsParser:
    """–ü–∞—Ä—Å–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞."""
        load_dotenv()
        self.yandex_urls = os.getenv("YANDEX_URLS", "").split(',')
        self.db_name = os.getenv("DATABASE_NAME")

        if not self.yandex_urls[0] or not self.db_name:
            raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ YANDEX_URLS –∏–ª–∏ DATABASE_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.engine = create_engine_instance()
        Session = sessionmaker(bind=self.engine)
        self.session = Session()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        init_db()

        self.driver = None

    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
        self.driver = setup_chrome_driver(headless=True)
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –æ—á–∏—Å—Ç–∫–∞."""
        if self.driver:
            self.driver.quit()
        if self.session:
            self.session.close()

    def _load_all_reviews(self, url: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–∫—Ä–æ–ª–ª–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤.

        Args:
            url: URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏

        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é URL: {url}")
            self.driver.get(url)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
            wait = WebDriverWait(self.driver, PARSING_CONFIG["page_load_timeout"])
            wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, 'div[class*="business-review-view"]')))
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

            time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            scrollable_element = self._find_scrollable_container()

            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
            self._scroll_to_load_all_reviews(scrollable_element)

            return True

        except TimeoutException:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {url}")
            return False

    def _find_scrollable_container(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä."""
        for selector in YANDEX_SELECTORS["scrollable_containers"]:
            try:
                return self.driver.find_element(By.CSS_SELECTOR, selector)
            except:
                continue

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤—Å—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        return self.driver.find_element(By.TAG_NAME, "body")

    def _scroll_to_load_all_reviews(self, scrollable_element):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤."""
        print("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤...")

        previous_review_count = 0
        stable_count_attempts = 0
        max_stable_attempts = PARSING_CONFIG["max_stable_attempts"]
        scroll_delay = PARSING_CONFIG["scroll_delay"]

        while stable_count_attempts < max_stable_attempts:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.execute_script("arguments[0].scrollTo(0, arguments[0].scrollHeight);", scrollable_element)
            time.sleep(scroll_delay)

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            current_reviews = len(self.driver.find_elements(By.CSS_SELECTOR, 'div[class*="business-review-view"]'))
            print(f"  –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {current_reviews}")

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if current_reviews == previous_review_count:
                stable_count_attempts += 1
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ ({stable_count_attempts}/{max_stable_attempts})")
            else:
                stable_count_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å

            previous_review_count = current_reviews

        print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")

    def _parse_review_cards(self, url: str) -> int:
        """
        –ü–∞—Ä—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        Args:
            url: URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        """
        page_source = self.driver.page_source
        soup = BeautifulSoup(page_source, 'html.parser')

        # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
        review_cards = []
        for selector in YANDEX_SELECTORS["review_cards"]:
            review_cards = soup.select(selector)
            if review_cards:
                break

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(review_cards)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞")

        if not review_cards:
            print("–û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return 0

        new_reviews_count = 0
        processed_reviews = set()  # –î–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

        for j, card in enumerate(review_cards, 1):
            try:
                print(f"  üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–∑—ã–≤ {j}/{len(review_cards)}")
                review_data = self._extract_review_data(card, url)

                if not review_data:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
                review_hash = f"{review_data['author_name']}|{review_data['review_text'][:100]}"
                if review_hash in processed_reviews:
                    print(f"    ‚ö™ –î—É–±–ª–∏–∫–∞—Ç –æ—Ç–∑—ã–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω")
                    continue
                processed_reviews.add(review_hash)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –æ—Ç–∑—ã–≤ –≤ –ë–î
                existing_review = self.session.query(Review).filter_by(
                    source='yandex',
                    author_name=review_data['author_name'],
                    review_text=review_data['review_text']
                ).first()

                if not existing_review:
                    new_review = Review(**review_data)
                    self.session.add(new_review)
                    new_reviews_count += 1
                    print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç: {review_data['author_name']} (‚≠ê{review_data['rating']})")
                else:
                    print(f"    ‚ö™ –û—Ç–∑—ã–≤ –æ—Ç {review_data['author_name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            except Exception as e:
                print(f"  ! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ç–∑—ã–≤–∞: {e}")
                continue

        return new_reviews_count

    def _extract_review_data(self, card, url: str) -> dict:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏.

        Args:
            card: BeautifulSoup —ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
            url: URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞

        Returns:
            dict: –î–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞ –∏–ª–∏ None
        """
        # –ê–≤—Ç–æ—Ä
        author_name = self._extract_with_selectors(card, YANDEX_SELECTORS["author"])
        if not author_name:
            print("    ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞")
            return None

        print(f"    üë§ –ê–≤—Ç–æ—Ä: {author_name}")

        # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        review_text = self._extract_with_selectors(card, YANDEX_SELECTORS["text"])
        if not review_text:
            print("    ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")
            return None

        print(f"    üí¨ –¢–µ–∫—Å—Ç: {review_text[:50]}...")

        # –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞
        publish_date = self._extract_review_date(card)

        # –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        author_avatar_url = self._extract_avatar_url(card)

        # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞
        rating = self._extract_rating(card)

        return {
            'source': 'yandex',
            'source_name': '–Ø–Ω–¥–µ–∫—Å.–ë–∏–∑–Ω–µ—Å',
            'source_url': url,
            'author_name': author_name,
            'author_avatar_url': author_avatar_url,
            'review_text': review_text,
            'publish_date': publish_date,
            'rating': rating
        }

    def _extract_with_selectors(self, card, selectors: list) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç, –ø—Ä–æ–±—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã."""
        for selector in selectors:
            element = card.select_one(selector)
            if element:
                return element.get_text(strip=True)
        return None

    def _extract_review_date(self, card) -> datetime:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –æ—Ç–∑—ã–≤–∞."""
        publish_date = datetime.now()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        for selector in YANDEX_SELECTORS["date"]:
            date_element = card.select_one(selector)
            if date_element:
                date_str = date_element.get_text(strip=True)
                publish_date = parse_yandex_date(date_str)
                break

        return publish_date

    def _extract_avatar_url(self, card) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∞–≤–∞—Ç–∞—Ä–∞ –∏–∑ background-image."""
        avatar_element = card.select_one(YANDEX_SELECTORS["avatar"])
        if avatar_element and avatar_element.has_attr('style'):
            return extract_background_image_url(avatar_element['style'])
        return None

    def _extract_rating(self, card) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–∑—ã–≤–∞."""
        try:
            # –ò—â–µ–º meta —Ç–µ–≥ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            rating_meta = card.select_one('meta[itemprop="ratingValue"]')
            if rating_meta and rating_meta.has_attr('content'):
                return float(rating_meta['content'])

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–¥—Å—á–µ—Ç –∑–≤–µ–∑–¥
            full_stars = card.select('.business-rating-badge-view__star._full')
            if full_stars:
                return float(len(full_stars))

        except (ValueError, TypeError):
            pass

        return PARSING_CONFIG["default_rating"]

    def fetch_all_reviews(self) -> int:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤.

        Returns:
            int: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
        """
        print("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç...")
        total_new_reviews = 0

        for url in self.yandex_urls:
            url = url.strip()
            if not url:
                continue

            try:
                if self._load_all_reviews(url):
                    new_reviews_count = self._parse_review_cards(url)
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {new_reviews_count} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è URL: {url}")
                    total_new_reviews += new_reviews_count

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
                continue

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.session.commit()
        print(f"–°–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {total_new_reviews}")
        return total_new_reviews


def fetch_and_save_yandex_reviews() -> int:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API.

    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    """
    with YandexReviewsParser() as parser:
        return parser.fetch_all_reviews()