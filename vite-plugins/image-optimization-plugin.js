import fs from 'fs';
import path from 'path';

/**
 * Vite –ø–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ production
 * 
 * –í development —Ä–µ–∂–∏–º–µ:
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * - –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * 
 * –í production —Ä–µ–∂–∏–º–µ:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
 * - –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É WebP —Å PNG fallback
 * - –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–±–æ—Ä–∫–∏
 */
export default function imageOptimizationPlugin() {
  let isProduction = false;
  let imageMapping = null;

  return {
    name: 'image-optimization',
    
    configResolved(config) {
      isProduction = config.command === 'build' && config.mode === 'production';
      
      if (isProduction) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–∏–Ω–≥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const mappingPath = path.resolve('src/assets/image-mapping.json');
        if (fs.existsSync(mappingPath)) {
          imageMapping = JSON.parse(fs.readFileSync(mappingPath, 'utf-8'));
          console.log('üñºÔ∏è  –ó–∞–≥—Ä—É–∂–µ–Ω –º–∞–ø–∏–Ω–≥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        } else {
          console.warn('‚ö†Ô∏è  –ú–∞–ø–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run optimize:images');
        }
      }
    },

    load(id) {
      if (!isProduction || !imageMapping) return null;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (id.includes('src/assets/') && /\.(png|jpg|jpeg|webp)$/.test(id)) {
        const relativePath = path.relative(path.resolve('src/assets'), id);
        const optimizedPath = imageMapping.production[relativePath];
        
        if (optimizedPath) {
          const fullOptimizedPath = path.resolve('src/assets', optimizedPath);
          if (fs.existsSync(fullOptimizedPath)) {
            console.log(`üîÑ ${relativePath} ‚Üí ${optimizedPath}`);
            return `export default "${optimizedPath}";`;
          }
        }
      }
      
      return null;
    },

    generateBundle(options, bundle) {
      if (!isProduction || !imageMapping) return;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ bundle –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
      Object.keys(bundle).forEach(fileName => {
        const chunk = bundle[fileName];
        
        if (chunk.type === 'chunk' && chunk.code) {
          let modifiedCode = chunk.code;
          let hasChanges = false;
          
          // –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –∫–æ–¥–µ
          Object.entries(imageMapping.production || {}).forEach(([original, optimized]) => {
            const originalPattern = new RegExp(`["'\`]${original.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}["'\`]`, 'g');
            if (originalPattern.test(modifiedCode)) {
              modifiedCode = modifiedCode.replace(originalPattern, `"${optimized}"`);
              hasChanges = true;
            }
          });
          
          if (hasChanges) {
            chunk.code = modifiedCode;
          }
        }
      });
    },

    transformIndexHtml(html) {
      if (!isProduction || !imageMapping) return html;
      
      // –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ HTML
      let modifiedHtml = html;
      Object.entries(imageMapping.production || {}).forEach(([original, optimized]) => {
        const pattern = new RegExp(`src=["']([^"']*)?${original.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}["']`, 'g');
        modifiedHtml = modifiedHtml.replace(pattern, `src="$1${optimized}"`);
      });
      
      return modifiedHtml;
    }
  };
}

/**
 * –•–µ–ª–ø–µ—Ä —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebP
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function createOptimizedImage(imagePath, alt = '', props = {}) {
  const webpPath = imagePath.replace(/\.(png|jpg|jpeg)$/i, '.webp');
  
  return `
    <picture>
      <source srcSet="${webpPath}" type="image/webp" />
      <img 
        src="${imagePath}" 
        alt="${alt}"
        loading="lazy"
        ${Object.entries(props).map(([key, value]) => `${key}="${value}"`).join(' ')}
      />
    </picture>
  `;
}