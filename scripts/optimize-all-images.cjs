#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const { glob } = require('glob');

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PNG –∏ WebP –≤–µ—Ä—Å–∏–∏ –¥–ª—è production —Å–±–æ—Ä–∫–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * - –í development: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
 * - –í production: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const OPTIMIZATION_PROFILES = {
  // –ò–∫–æ–Ω–∫–∏ –∫–≤–∏–∑–∞ - –º–∞–ª–µ–Ω—å–∫–∏–µ, –≤—ã—Å–æ–∫–æ–µ —Å–∂–∞—Ç–∏–µ
  'quiz-icons': {
    pattern: 'src/assets/images/quiz-icons/**/*.{png,jpg,jpeg}',
    resize: { width: 64, height: 64 },
    png: { quality: 80, compressionLevel: 9, palette: true },
    webp: { quality: 85, effort: 6 }
  },
  
  // –î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä, —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ  
  'design': {
    pattern: 'src/assets/images/design/**/*.{png,jpg,jpeg}',
    resize: { width: 400, height: 400, withoutEnlargement: true },
    png: { quality: 85, compressionLevel: 8 },
    webp: { quality: 90, effort: 5 }
  },
  
  // –§–∞–≤–∏–∫–æ–Ω—ã - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
  'favicons': {
    pattern: 'src/assets/favicons/**/*.{png,jpg,jpeg}',
    resize: null, // –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä
    png: { quality: 90, compressionLevel: 6 },
    webp: { quality: 95, effort: 4 }
  },
  
  // –ò–∫–æ–Ω–∫–∏ - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä
  'icons': {
    pattern: 'src/assets/icons/**/*.{png,jpg,jpeg}',
    resize: { width: 200, height: 200, withoutEnlargement: true },
    png: { quality: 88, compressionLevel: 8 },
    webp: { quality: 90, effort: 5 }
  },
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  'general': {
    pattern: 'src/assets/images/**/*.{png,jpg,jpeg}',
    exclude: ['quiz-icons', 'design'], // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    resize: { width: 800, height: 800, withoutEnlargement: true },
    png: { quality: 85, compressionLevel: 7 },
    webp: { quality: 88, effort: 5 }
  }
};

class ImageOptimizer {
  constructor() {
    this.stats = {
      processed: 0,
      originalSize: 0,
      optimizedSize: 0,
      webpSize: 0,
      errors: []
    };
  }

  async optimizeAll() {
    console.log('üñºÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    console.log('üìÅ –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await this.createOptimizedStructure();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    for (const [profileName, config] of Object.entries(OPTIMIZATION_PROFILES)) {
      console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å: ${profileName}`);
      await this.processProfile(profileName, config);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Vite
    await this.generateImageMapping();
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.printStats();
    
    console.log('\nüöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  }

  async createOptimizedStructure() {
    const dirs = [
      'src/assets/images-optimized',
      'src/assets/images-optimized/quiz-icons',
      'src/assets/images-optimized/design',
      'src/assets/favicons-optimized',
      'src/assets/icons-optimized'
    ];
    
    for (const dir of dirs) {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    }
  }

  async processProfile(profileName, config) {
    try {
      const files = await glob(config.pattern, { ignore: 'node_modules/**' });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è general –ø—Ä–æ—Ñ–∏–ª—è
      let filteredFiles = files;
      if (config.exclude) {
        filteredFiles = files.filter(file => {
          return !config.exclude.some(excluded => file.includes(excluded));
        });
      }
      
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filteredFiles.length}`);
      
      for (const file of filteredFiles) {
        await this.optimizeImage(file, config, profileName);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ ${profileName}:`, error.message);
      this.stats.errors.push({ profile: profileName, error: error.message });
    }
  }

  async optimizeImage(inputPath, config, profileName) {
    try {
      const originalStats = fs.statSync(inputPath);
      this.stats.originalSize += originalStats.size;
      
      const parsedPath = path.parse(inputPath);
      const relativePath = path.relative('src/assets', inputPath);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏
      let outputDir;
      if (profileName === 'favicons') {
        outputDir = 'src/assets/favicons-optimized';
      } else if (profileName === 'icons') {
        outputDir = 'src/assets/icons-optimized';
      } else {
        outputDir = path.join('src/assets/images-optimized', path.dirname(relativePath).replace('images/', ''));
      }
      
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      const baseOutputPath = path.join(outputDir, parsedPath.name);
      const pngPath = `${baseOutputPath}.png`;
      const webpPath = `${baseOutputPath}.webp`;
      
      // –°–æ–∑–¥–∞–µ–º Sharp –∏–Ω—Å—Ç–∞–Ω—Å
      let sharpInstance = sharp(inputPath);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º resize –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (config.resize) {
        sharpInstance = sharpInstance.resize(config.resize);
      }
      
      // –°–æ–∑–¥–∞–µ–º PNG –≤–µ—Ä—Å–∏—é
      await sharpInstance
        .clone()
        .png(config.png)
        .toFile(pngPath);
      
      // –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏—é
      await sharpInstance
        .clone()
        .webp(config.webp)
        .toFile(webpPath);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const pngStats = fs.statSync(pngPath);
      const webpStats = fs.statSync(webpPath);
      
      this.stats.optimizedSize += pngStats.size;
      this.stats.webpSize += webpStats.size;
      this.stats.processed++;
      
      const originalKB = Math.round(originalStats.size / 1024);
      const pngKB = Math.round(pngStats.size / 1024);
      const webpKB = Math.round(webpStats.size / 1024);
      
      console.log(`     ‚úÖ ${path.basename(inputPath)}: ${originalKB}KB ‚Üí PNG: ${pngKB}KB, WebP: ${webpKB}KB`);
      
    } catch (error) {
      console.error(`     ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${inputPath}:`, error.message);
      this.stats.errors.push({ file: inputPath, error: error.message });
    }
  }

  async generateImageMapping() {
    console.log('\nüìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞–ø–∏–Ω–≥ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    const mapping = {
      development: {},
      production: {}
    };
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
    const optimizedFiles = await glob('src/assets/{images-optimized,favicons-optimized,icons-optimized}/**/*.{png,webp}');
    
    for (const optimizedPath of optimizedFiles) {
      const parsedPath = path.parse(optimizedPath);
      const relativePath = optimizedPath.replace(/^src\/assets\//, '');
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å
      let originalPath;
      if (optimizedPath.includes('favicons-optimized')) {
        originalPath = optimizedPath.replace('favicons-optimized', 'favicons');
      } else if (optimizedPath.includes('icons-optimized')) {
        originalPath = optimizedPath.replace('icons-optimized', 'icons');
      } else {
        originalPath = optimizedPath.replace('images-optimized', 'images');
      }
      
      const originalRelativePath = originalPath.replace(/^src\/assets\//, '');
      
      if (parsedPath.ext === '.png') {
        // PNG - —ç—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        mapping.development[originalRelativePath] = originalRelativePath;
        mapping.production[originalRelativePath] = relativePath;
      } else if (parsedPath.ext === '.webp') {
        // WebP - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
        const webpKey = originalRelativePath.replace(/\.(png|jpg|jpeg)$/, '.webp');
        mapping.development[webpKey] = null; // –í dev –Ω–µ—Ç WebP
        mapping.production[webpKey] = relativePath;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–∏–Ω–≥
    const mappingPath = 'src/assets/image-mapping.json';
    fs.writeFileSync(mappingPath, JSON.stringify(mapping, null, 2));
    
    console.log(`   ‚úÖ –ú–∞–ø–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${mappingPath}`);
  }

  printStats() {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.stats.processed}`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(this.stats.originalSize / 1024 / 1024 * 100) / 100} MB`);
    console.log(`   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PNG: ${Math.round(this.stats.optimizedSize / 1024 / 1024 * 100) / 100} MB`);
    console.log(`   WebP –≤–µ—Ä—Å–∏–∏: ${Math.round(this.stats.webpSize / 1024 / 1024 * 100) / 100} MB`);
    
    const pngSavings = Math.round((1 - this.stats.optimizedSize / this.stats.originalSize) * 100);
    const webpSavings = Math.round((1 - this.stats.webpSize / this.stats.originalSize) * 100);
    
    console.log(`\nüí∞ –≠–∫–æ–Ω–æ–º–∏—è:`);
    console.log(`   PNG: ${pngSavings}%`);
    console.log(`   WebP: ${webpSavings}%`);
    
    if (this.stats.errors.length > 0) {
      console.log(`\n‚ö†Ô∏è  –û—à–∏–±–∫–∏: ${this.stats.errors.length}`);
      this.stats.errors.forEach(error => {
        console.log(`     ${error.file || error.profile}: ${error.error}`);
      });
    }
  }
}

// –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
if (require.main === module) {
  const optimizer = new ImageOptimizer();
  optimizer.optimizeAll().catch(console.error);
}

module.exports = ImageOptimizer;