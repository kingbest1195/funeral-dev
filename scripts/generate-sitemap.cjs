#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap.xml –¥–ª—è —Å–∞–π—Ç–∞ —Ä–∏—Ç—É–∞–ª—å–Ω–æ–π —Å–ª—É–∂–±—ã "–í–µ–∫"
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–æ–º–µ–Ω –∏–∑ constants –∏ –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω –∏–∑ constants
function getSiteConfig() {
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const constantsPath = path.join(__dirname, '../src/constants/content.js');
    const constantsContent = fs.readFileSync(constantsPath, 'utf8');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º DOMAIN –∏–∑ SITE_CONFIG
    const domainMatch = constantsContent.match(/DOMAIN:\s*["']([^"']+)["']/);
    const baseUrl = domainMatch ? domainMatch[1] : 'https://xn----7sbhmlqd1btk.xn--p1ai';

    return {
      baseUrl,
      defaultChangefreq: 'monthly',
      defaultPriority: '0.8'
    };
  } catch (error) {
    console.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω –∏–∑ constants, –∏—Å–ø–æ–ª—å–∑—É—é –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π');
    return {
      baseUrl: 'https://xn----7sbhmlqd1btk.xn--p1ai',
      defaultChangefreq: 'monthly',
      defaultPriority: '0.8'
    };
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü (–∏—Å–ø–æ–ª—å–∑—É–µ–º canonical URLs —Å–æ —Å–ª–µ—à–µ–º)
const PAGE_SETTINGS = {
  '/': {
    priority: '1.0',
    changefreq: 'weekly'
  },
  '/uslugi/': {
    priority: '0.9',
    changefreq: 'monthly'
  },
  '/uslugi/organizatsiya-pohoron/': {
    priority: '0.8',
    changefreq: 'monthly'
  },
  '/uslugi/transportirovka-umershego/': {
    priority: '0.8',
    changefreq: 'monthly'
  },
  '/privacy/': {
    priority: '0.3',
    changefreq: 'yearly'
  }
};

class SitemapGenerator {
  constructor() {
    this.pages = [];
    this.lastmod = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    this.siteConfig = getSiteConfig();
  }

  async generate() {
    console.log('üó∫Ô∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sitemap.xml...');
    console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω: ${this.siteConfig.baseUrl}`);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (canonical URLs)
    this.addStaticRoutes();

    // –°–æ–∑–¥–∞–µ–º sitemap.xml
    const sitemapContent = this.createSitemapXML();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ public –ø–∞–ø–∫—É
    const outputPath = 'public/sitemap.xml';
    fs.writeFileSync(outputPath, sitemapContent);

    console.log(`‚úÖ Sitemap —Å–æ–∑–¥–∞–Ω: ${outputPath}`);
    console.log(`üìÑ –í–∫–ª—é—á–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.pages.length}`);
    this.pages.forEach(page => {
      console.log(`   ${page.url} (priority: ${page.priority})`);
    });
  }

  async scanRoutes() {
    // –ß–∏—Ç–∞–µ–º App.jsx –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    const appPath = 'src/App.jsx';

    if (!fs.existsSync(appPath)) {
      console.warn('‚ö†Ô∏è  App.jsx –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
      this.addStaticRoutes();
      return;
    }

    const appContent = fs.readFileSync(appPath, 'utf8');

    // –ü–∞—Ä—Å–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ <Route path="..."
    const routeMatches = appContent.matchAll(/<Route\s+path="([^"]+)"/g);

    for (const match of routeMatches) {
      const path = match[1];

      // –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
      if (path.includes(':') || path === '*') {
        continue;
      }

      this.addPage(path);
    }

    // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ
    if (this.pages.length === 0) {
      console.warn('‚ö†Ô∏è  –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ App.jsx, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫');
      this.addStaticRoutes();
    }
  }

  addStaticRoutes() {
    // –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞ (canonical URLs —Å–æ —Å–ª–µ—à–µ–º)
    const staticRoutes = [
      '/',
      '/uslugi/',
      '/uslugi/organizatsiya-pohoron/',
      '/uslugi/transportirovka-umershego/',
      '/privacy/'
    ];

    staticRoutes.forEach(route => this.addPage(route));
  }

  addPage(path) {
    const settings = PAGE_SETTINGS[path] || {};

    const page = {
      url: path,
      lastmod: this.lastmod,
      changefreq: settings.changefreq || SITE_CONFIG.defaultChangefreq,
      priority: settings.priority || SITE_CONFIG.defaultPriority
    };

    this.pages.push(page);
  }

  createSitemapXML() {
    const urls = this.pages.map(page => {
      return `  <url>
    <loc>${this.siteConfig.baseUrl}${page.url}</loc>
    <lastmod>${page.lastmod}</lastmod>
    <changefreq>${page.changefreq}</changefreq>
    <priority>${page.priority}</priority>
  </url>`;
    }).join('\n');

    return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls}
</urlset>`;
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if (require.main === module) {
  const generator = new SitemapGenerator();
  generator.generate().catch(console.error);
}

module.exports = SitemapGenerator;